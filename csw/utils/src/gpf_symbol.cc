
/*
         ************************************************
         *                                              *
         *    Copyright (1997-2017) Glenn Pinkerton.    *
         *    All rights reserved.                      *
         *                                              *
         ************************************************
*/

/*
    
    gpf_symbol.cc

    This file has functions for extracting circles, vectors, and text from the
    symbol definition.  There are also functions to scale and rotate the extracted
    entities in preparation for plotting.

*/

#include <math.h>
#include <stdio.h>

#include "csw/utils/include/csw_.h"
#include "csw/utils/private_include/gpf_symb.h"
#include "csw/utils/private_include/gpf_shape.h"


/*  data for the symbol definition structures  */

static const SYmbolDef              SymbolList[] = {

    { 1,    -1,     0,     0,     1,    -1,     0},    /* symbol number 0 */
    { 1,    -1,     0,     1,     1,    -1,     0},    /* symbol number 1 */
    { 1,     0,     1,    -1,     0,    -1,     0},    /* symbol number 2 */
    { 1,     1,     1,    -1,     0,    -1,     0},    /* symbol number 3 */
    { 1,    -1,     0,     2,     1,    -1,     0},    /* symbol number 4 */
    { 1,    -1,     0,     3,     1,    -1,     0},    /* symbol number 5 */
    { 1,    -1,     0,     4,     2,    -1,     0},    /* symbol number 6 */
    { 1,    -1,     0,     6,     2,    -1,     0},    /* symbol number 7 */
    { 1,    -1,     0,     8,     1,    -1,     0},    /* symbol number 8 */
    { 1,    -1,     0,     9,     1,    -1,     0},    /* symbol number 9 */
    { 1,    -1,     0,    10,     2,    -1,     0},    /* symbol number 10 */
    { 1,    -1,     0,    12,     2,    -1,     0},    /* symbol number 11 */
    { 1,    -1,     0,    14,     2,    -1,     0},    /* symbol number 12 */
    { 1,    -1,     0,    16,     2,    -1,     0},    /* symbol number 13 */
    { 1,    -1,     0,    18,     1,    -1,     0},    /* symbol number 14 */
    { 1,    -1,     0,    19,     1,    -1,     0},    /* symbol number 15 */
    { 1,    -1,     0,    20,     5,    -1,     0},    /* symbol number 16 */
    { 1,    -1,     0,    25,     5,    -1,     0},    /* symbol number 17 */
    { 1,    -1,     0,    30,     4,    -1,     0},    /* symbol number 18 */
    { 1,    -1,     0,    34,     2,    -1,     0},    /* symbol number 19 */
    { 1,    -1,     0,    36,     2,    -1,     0},    /* symbol number 20 */
    { 1,    -1,     0,    38,     1,    -1,     0},    /* symbol number 21 */
    { 1,    -1,     0,    39,     1,    -1,     0},    /* symbol number 22 */
    { 1,    -1,     0,    40,     1,    -1,     0},    /* symbol number 23 */
    { 1,    -1,     0,    41,     1,    -1,     0},    /* symbol number 24 */
    { 1,     2,     2,    -1,     0,    -1,     0},    /* symbol number 25 */
    { 1,     4,     1,    42,     2,    -1,     0},    /* symbol number 26 */
    { 1,     5,     1,    44,     2,    -1,     0},    /* symbol number 27 */
    { 1,     6,     2,    46,     2,    -1,     0},    /* symbol number 28 */
    { 1,     8,     2,    48,     2,    -1,     0},    /* symbol number 29 */
    { 1,    10,     1,    -1,     0,    -1,     0},    /* symbol number 30 */
    { 1,    11,     1,    -1,     0,    -1,     0},    /* symbol number 31 */
    { 1,    12,     2,    -1,     0,    -1,     0},    /* symbol number 32 */
    { 1,    14,     1,    50,     1,    -1,     0},    /* symbol number 33 */
    { 1,    15,     1,    51,     1,    -1,     0},    /* symbol number 34 */
    { 1,    16,     2,    52,     1,    -1,     0},    /* symbol number 35 */
    { 1,    18,     1,    53,     1,    -1,     0},    /* symbol number 36 */
    { 1,    19,     1,    54,     1,    -1,     0},    /* symbol number 37 */
    { 1,    20,     2,    55,     1,    -1,     0},    /* symbol number 38 */
    { 1,    22,     1,    56,     2,    -1,     0},    /* symbol number 39 */
    { 1,    23,     1,    58,     2,    -1,     0},    /* symbol number 40 */
    { 1,    24,     2,    60,     2,    -1,     0},    /* symbol number 41 */
    { 1,    26,     1,    62,     2,    -1,     0},    /* symbol number 42 */
    { 1,    27,     1,    64,     2,    -1,     0},    /* symbol number 43 */
    { 1,    28,     2,    66,     2,    -1,     0},    /* symbol number 44 */
    { 1,    30,     1,    68,     4,    -1,     0},    /* symbol number 45 */
    { 1,    31,     1,    72,     4,    -1,     0},    /* symbol number 46 */
    { 1,    32,     2,    76,     4,    -1,     0},    /* symbol number 47 */
    { 1,    34,     1,    80,     5,    -1,     0},    /* symbol number 48 */
    { 1,    35,     1,    85,     5,    -1,     0},    /* symbol number 49 */
    { 1,    36,     2,    90,     5,    -1,     0},    /* symbol number 50 */
    { 1,    38,     1,    95,     5,    -1,     0},    /* symbol number 51 */
    { 1,    39,     1,   100,     5,    -1,     0},    /* symbol number 52 */
    { 1,    40,     2,   105,     5,    -1,     0},    /* symbol number 53 */
    { 1,    42,     1,   110,     6,    -1,     0},    /* symbol number 54 */
    { 1,    43,     1,   116,     6,    -1,     0},    /* symbol number 55 */
    { 1,    44,     2,   122,     6,    -1,     0},    /* symbol number 56 */
    { 1,    46,     1,   128,     6,    -1,     0},    /* symbol number 57 */
    { 1,    47,     1,   134,     6,    -1,     0},    /* symbol number 58 */
    { 1,    48,     2,   140,     6,    -1,     0},    /* symbol number 59 */
    { 1,    50,     1,   146,     8,    -1,     0},    /* symbol number 60 */
    { 1,    51,     1,   154,     8,    -1,     0},    /* symbol number 61 */
    { 1,    52,     2,   162,     8,    -1,     0},    /* symbol number 62 */
    { 1,    54,     1,    -1,     0,     0,     1},    /* symbol number 63 */
    { 1,    55,     1,    -1,     0,     1,     1},    /* symbol number 64 */
    { 1,    56,     2,    -1,     0,     2,     1},    /* symbol number 65 */
    { 1,    58,     1,    -1,     0,     3,     1},    /* symbol number 66 */
    { 1,    59,     1,    -1,     0,     4,     1},    /* symbol number 67 */
    { 1,    60,     2,    -1,     0,     5,     1},    /* symbol number 68 */
    { 1,    62,     1,    -1,     0,     6,     1},    /* symbol number 69 */
    { 1,    63,     1,    -1,     0,     7,     1},    /* symbol number 70 */
    { 1,    64,     2,    -1,     0,     8,     1},    /* symbol number 71 */
    { 1,    66,     1,    -1,     0,     9,     1},    /* symbol number 72 */
    { 1,    67,     1,    -1,     0,    10,     1},    /* symbol number 73 */
    { 1,    68,     2,    -1,     0,    11,     1},    /* symbol number 74 */
    { 1,    70,     1,    -1,     0,    12,     1},    /* symbol number 75 */
    { 1,    71,     1,    -1,     0,    13,     1},    /* symbol number 76 */
    { 1,    72,     2,    -1,     0,    14,     1},    /* symbol number 77 */
    { 1,    74,     1,   170,     4,    15,     1},    /* symbol number 78 */
    { 1,    75,     1,   174,     4,    16,     1},    /* symbol number 79 */
    { 1,    76,     2,   178,     4,    17,     1},    /* symbol number 80 */
    { 1,    78,     1,   182,     4,    18,     1},    /* symbol number 81 */
    { 1,    79,     1,   186,     4,    19,     1},    /* symbol number 82 */
    { 1,    80,     2,   190,     4,    20,     1},    /* symbol number 83 */
    { 1,    82,     1,   194,     4,    21,     1},    /* symbol number 84 */
    { 1,    83,     1,   198,     4,    22,     1},    /* symbol number 85 */
    { 1,    84,     2,   202,     4,    23,     1},    /* symbol number 86 */
    { 1,    86,     1,    -1,     0,    -1,     0},    /* symbol number 87 */
    { 1,    87,     1,    -1,     0,    -1,     0},    /* symbol number 88 */
    { 1,    88,     1,    -1,     0,    -1,     0},    /* symbol number 89 */
    { 1,    89,     1,    -1,     0,    -1,     0},    /* symbol number 90 */
    { 1,    90,     1,    -1,     0,    -1,     0},    /* symbol number 91 */
    { 1,    91,     1,    -1,     0,    -1,     0},    /* symbol number 92 */
    { 1,    -1,     0,   206,     3,    -1,     0},    /* symbol number 93 */
    { 1,    -1,     0,   209,     2,    -1,     0},    /* symbol number 94 */
    { 1,    -1,     0,   211,     2,    -1,     0},    /* symbol number 95 */
    { 1,    -1,     0,   213,     1,    -1,     0},    /* symbol number 96 */
    { 1,    -1,     0,   214,     1,    -1,     0},    /* symbol number 97 */
    { 1,    -1,     0,   215,     5,    -1,     0},    /* symbol number 98 */
    { 1,    -1,     0,   220,     5,    -1,     0},    /* symbol number 99 */
    { 1,    -1,     0,   225,     3,    -1,     0},    /* symbol number 100 */
    { 1,    -1,     0,   228,     3,    -1,     0},    /* symbol number 101 */
    { 1,    -1,     0,   231,     5,    -1,     0},    /* symbol number 102 */
    { 1,    -1,     0,   236,     5,    -1,     0},    /* symbol number 103 */
    { 1,    -1,     0,   241,     3,    -1,     0},    /* symbol number 104 */
    { 1,    -1,     0,   244,     3,    -1,     0},    /* symbol number 105 */
    { 1,    -1,     0,   247,     2,    -1,     0},    /* symbol number 106 */
    { 1,    92,     1,   249,     4,    -1,     0},    /* symbol number 107 */
    { 1,    93,     1,   253,     4,    -1,     0},    /* symbol number 108 */
    { 1,    94,     1,   257,     2,    -1,     0},    /* symbol number 109 */
    { 1,    95,     1,   259,     2,    -1,     0},    /* symbol number 110 */
    { 1,    96,     1,   261,     2,    -1,     0},    /* symbol number 111 */
    { 1,    97,     1,   263,     2,    -1,     0},    /* symbol number 112 */
    { 1,    -1,     0,   265,     2,    -1,     0},    /* symbol number 113 */
    { 1,    -1,     0,   267,     1,    -1,     0},    /* symbol number 114 */
    { 1,    -1,     0,   268,     1,    -1,     0},    /* symbol number 115 */
    { 1,    -1,     0,   269,     3,    -1,     0},    /* symbol number 116 */
    { 1,    -1,     0,   272,     2,    -1,     0},    /* symbol number 117 */
    { 1,    -1,     0,   274,     2,    -1,     0},    /* symbol number 118 */
    { 1,    -1,     0,   276,     4,    -1,     0},    /* symbol number 119 */
    { 1,    -1,     0,   280,     4,    -1,     0},    /* symbol number 120 */
    { 1,    -1,     0,   284,     6,    -1,     0},    /* symbol number 121 */
    { 1,    -1,     0,   290,     6,    -1,     0},    /* symbol number 122 */
    { 1,    -1,     0,    -1,     0,    24,     1},    /* symbol number 123 */
    { 1,    -1,     0,    -1,     0,    25,     1},    /* symbol number 124 */
    { 1,    -1,     0,    -1,     0,    26,     1},    /* symbol number 125 */
    { 1,    -1,     0,    -1,     0,    27,     1},    /* symbol number 126 */
    { 1,    -1,     0,    -1,     0,    28,     1},    /* symbol number 127 */
    { 1,    -1,     0,    -1,     0,    29,     1},    /* symbol number 128 */
    { 1,    -1,     0,   296,     1,    -1,     0},    /* symbol number 129 */
    { 1,    -1,     0,   297,     1,    -1,     0},    /* symbol number 130 */
    { 1,    -1,     0,   298,     1,    -1,     0},    /* symbol number 131 */
    { 1,    -1,     0,   299,     1,    -1,     0},    /* symbol number 132 */
    { 1,    -1,     0,   300,     1,    -1,     0},    /* symbol number 133 */
    { 1,    -1,     0,   301,     1,    -1,     0},    /* symbol number 134 */
    { 1,    -1,     0,   302,     1,    -1,     0},    /* symbol number 135 */
    { 1,    -1,     0,   303,     1,    -1,     0},    /* symbol number 136 */
    { 1,    -1,     0,   304,     2,    -1,     0},    /* symbol number 137 */
    { 1,    -1,     0,   306,     2,    -1,     0},    /* symbol number 138 */
    { 1,    -1,     0,   308,     4,    -1,     0},    /* symbol number 139 */
    { 1,    -1,     0,   312,     4,    -1,     0},    /* symbol number 140 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 141 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 142 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 143 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 144 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 145 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 146 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 147 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 148 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 149 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 150 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 151 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 152 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 153 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 154 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 155 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 156 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 157 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 158 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 159 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 160 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 161 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 162 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 163 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 164 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 165 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 166 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 167 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 168 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 169 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 170 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 171 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 172 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 173 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 174 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 175 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 176 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 177 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 178 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 179 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 180 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 181 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 182 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 183 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 184 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 185 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 186 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 187 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 188 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 189 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 190 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 191 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 192 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 193 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 194 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 195 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 196 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 197 */
    { 0,    -1,     0,    -1,     0,    -1,     0},    /* symbol number 198 */
    { 0,    -1,     0,    -1,     0,    -1,     0}     /* symbol number 199 */
    };

/*  data for symbol vector structures  */

static const SYmVecList          SymbolVectors[] = {

    {    0,   10, 10},
    {   10,   10,  1},
    {   20,    8, 10},
    {   28,    8,  1},
    {   36,    4,  0},
    {   40,    4,  0},
    {   44,    4,  0},
    {   48,    4,  0},
    {   52,   10, 10},
    {   62,   10,  1},
    {   72,    4,  0},
    {   76,    8, 10},
    {   84,    8,  1},
    {   92,    4,  0},
    {   96,    6,  0},
    {  102,    8, 10},
    {  110,    8,  1},
    {  118,    6,  0},
    {  124,    8,  0},
    {  132,   10,  0},
    {  142,    4,  0},
    {  146,    4,  0},
    {  150,    4,  0},
    {  154,    4,  0},
    {  158,   10, 10},
    {  168,   10,  1},
    {  178,    4,  0},
    {  182,    4,  0},
    {  186,    4,  0},
    {  190,    4,  0},
    {  194,    4,  0},
    {  198,    4,  0},
    {  202,    4,  0},
    {  206,    4,  0},
    {  210,    8, 10},
    {  218,    8, 10},
    {  226,    8,  1},
    {  234,    8,  1},
    {  242,    4,  0},
    {  246,   12,  0},
    {  258,   26, 10},
    {  284,   26,  1},
    {  310,    4,  0},
    {  314,    4,  0},
    {  318,    4,  0},
    {  322,    4,  0},
    {  326,    4,  0},
    {  330,    4,  0},
    {  334,    4,  0},
    {  338,    4,  0},
    {  342,    4,  0},
    {  346,    4,  0},
    {  350,    4,  0},
    {  354,    4,  0},
    {  358,    4,  0},
    {  362,    4,  0},
    {  366,    4,  0},
    {  370,    4,  0},
    {  374,    4,  0},
    {  378,    4,  0},
    {  382,    4,  0},
    {  386,    4,  0},
    {  390,    4,  0},
    {  394,    4,  0},
    {  398,    4,  0},
    {  402,    4,  0},
    {  406,    4,  0},
    {  410,    4,  0},
    {  414,    4,  0},
    {  418,    4,  0},
    {  422,    4,  0},
    {  426,    4,  0},
    {  430,    4,  0},
    {  434,    4,  0},
    {  438,    4,  0},
    {  442,    4,  0},
    {  446,    4,  0},
    {  450,    4,  0},
    {  454,    4,  0},
    {  458,    4,  0},
    {  462,    4,  0},
    {  466,    4,  0},
    {  470,    4,  0},
    {  474,    4,  0},
    {  478,    4,  0},
    {  482,    4,  0},
    {  486,    4,  0},
    {  490,    4,  0},
    {  494,    4,  0},
    {  498,    4,  0},
    {  502,    4,  0},
    {  506,    4,  0},
    {  510,    4,  0},
    {  514,    4,  0},
    {  518,    4,  0},
    {  522,    4,  0},
    {  526,    4,  0},
    {  530,    4,  0},
    {  534,    4,  0},
    {  538,    4,  0},
    {  542,    4,  0},
    {  546,    4,  0},
    {  550,    4,  0},
    {  554,    4,  0},
    {  558,    4,  0},
    {  562,    4,  0},
    {  566,    4,  0},
    {  570,    4,  0},
    {  574,    4,  0},
    {  578,    4,  0},
    {  582,    4,  0},
    {  586,    4,  0},
    {  590,    4,  0},
    {  594,    4,  0},
    {  598,    4,  0},
    {  602,    4,  0},
    {  606,    4,  0},
    {  610,    4,  0},
    {  614,    4,  0},
    {  618,    4,  0},
    {  622,    4,  0},
    {  626,    4,  0},
    {  630,    4,  0},
    {  634,    4,  0},
    {  638,    4,  0},
    {  642,    4,  0},
    {  646,    4,  0},
    {  650,    4,  0},
    {  654,    4,  0},
    {  658,    4,  0},
    {  662,    4,  0},
    {  666,    4,  0},
    {  670,    4,  0},
    {  674,    4,  0},
    {  678,    4,  0},
    {  682,    4,  0},
    {  686,    4,  0},
    {  690,    4,  0},
    {  694,    4,  0},
    {  698,    4,  0},
    {  702,    4,  0},
    {  706,    4,  0},
    {  710,    4,  0},
    {  714,    4,  0},
    {  718,    4,  0},
    {  722,    4,  0},
    {  726,    4,  0},
    {  730,    4,  0},
    {  734,    4,  0},
    {  738,    4,  0},
    {  742,    4,  0},
    {  746,    4,  0},
    {  750,    4,  0},
    {  754,    4,  0},
    {  758,    4,  0},
    {  762,    4,  0},
    {  766,    4,  0},
    {  770,    4,  0},
    {  774,    4,  0},
    {  778,    4,  0},
    {  782,    4,  0},
    {  786,    4,  0},
    {  790,    4,  0},
    {  794,    4,  0},
    {  798,    4,  0},
    {  802,    4,  0},
    {  806,    4,  0},
    {  810,    4,  0},
    {  814,    4,  0},
    {  818,    4,  0},
    {  822,    4,  0},
    {  826,    4,  0},
    {  830,    4,  0},
    {  834,    4,  0},
    {  838,    4,  0},
    {  842,    4,  0},
    {  846,    4,  0},
    {  850,    4,  0},
    {  854,    4,  0},
    {  858,    4,  0},
    {  862,    4,  0},
    {  866,    4,  0},
    {  870,    4,  0},
    {  874,    4,  0},
    {  878,    4,  0},
    {  882,    4,  0},
    {  886,    4,  0},
    {  890,    4,  0},
    {  894,    4,  0},
    {  898,    4,  0},
    {  902,    4,  0},
    {  906,    4,  0},
    {  910,    4,  0},
    {  914,    4,  0},
    {  918,    4,  0},
    {  922,    4,  0},
    {  926,    4,  0},
    {  930,    4,  0},
    {  934,    4,  0},
    {  938,    4,  0},
    {  942,    4,  0},
    {  946,    4,  0},
    {  950,    4,  0},
    {  954,    4,  0},
    {  958,    4,  0},
    {  962,    4,  0},
    {  966,    6,  0},
    {  972,    4,  0},
    {  976,    6,  0},
    {  982,    4,  0},
    {  986,    6,  0},
    {  992,    4,  0},
    {  996,    4,  0},
    { 1000,   14, 10},
    { 1014,   14,  1},
    { 1028,    4,  0},
    { 1032,    4,  0},
    { 1036,    4,  0},
    { 1040,    4,  0},
    { 1044,   10,  0},
    { 1054,    4,  0},
    { 1058,    4,  0},
    { 1062,    4,  0},
    { 1066,    4,  0},
    { 1070,   10,  1},
    { 1080,    4,  0},
    { 1084,    4,  0},
    { 1088,   10,  0},
    { 1098,    4,  0},
    { 1102,    4,  0},
    { 1106,   10,  1},
    { 1116,    4,  0},
    { 1120,    4,  0},
    { 1124,    4,  0},
    { 1128,    4,  0},
    { 1132,   10, 10},
    { 1142,    4,  0},
    { 1146,    4,  0},
    { 1150,    4,  0},
    { 1154,    4,  0},
    { 1158,   10,  1},
    { 1168,    4,  0},
    { 1172,    4,  0},
    { 1176,   10, 10},
    { 1186,    4,  0},
    { 1190,    4,  0},
    { 1194,   10, 11},
    { 1204,    4,  0},
    { 1208,    4,  0},
    { 1212,    6,  0},
    { 1218,    4,  0},
    { 1222,    6,  0},
    { 1228,    4,  0},
    { 1232,    6,  0},
    { 1238,    4,  0},
    { 1242,    6,  0},
    { 1248,    4,  0},
    { 1252,    4,  0},
    { 1256,    8,  0},
    { 1264,    4,  0},
    { 1268,    8,  1},
    { 1276,    4,  0},
    { 1280,    8,  0},
    { 1288,    4,  0},
    { 1292,    8,  1},
    { 1300,    4,  0},
    { 1304,    4,  0},
    { 1308,    6,  0},
    { 1314,    6,  0},
    { 1320,    4,  0},
    { 1324,    4,  0},
    { 1328,    4,  0},
    { 1332,    4,  0},
    { 1336,    8, 10},
    { 1344,    4,  0},
    { 1348,    8,  1},
    { 1356,    4,  0},
    { 1360,    8, 10},
    { 1368,    8, 10},
    { 1376,    8, 10},
    { 1384,    4,  0},
    { 1388,    8,  1},
    { 1396,    8,  1},
    { 1404,    8,  1},
    { 1412,    4,  0},
    { 1416,    8, 10},
    { 1424,    8, 10},
    { 1432,    8, 10},
    { 1440,    8, 10},
    { 1448,    8, 10},
    { 1456,    4,  0},
    { 1460,    8,  1},
    { 1468,    8,  1},
    { 1476,    8,  1},
    { 1484,    8,  1},
    { 1492,    8,  1},
    { 1500,   10, 10},
    { 1510,   10,  1},
    { 1520,   10, 10},
    { 1530,   10,  1},
    { 1540,   10, 10},
    { 1550,   10,  1},
    { 1560,   22, 10},
    { 1582,   22,  1},
    { 1604,   10,  0},
    { 1614,   18,  0},
    { 1632,   10,  1},
    { 1642,   18,  0},
    { 1660,    4,  0},
    { 1664,    4,  0},
    { 1668,   12,  0},
    { 1680,   20,  0},
    { 1700,    4,  0},
    { 1704,    4,  0},
    { 1708,   12,  0},
    { 1720,   20,  1}

    };

/*  symbol circle structures  */

static const SYmCircle              SymbolCircles[] = {

    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   15.00f,   15.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   15.00f,   15.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   15.00f,   15.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   25.00f,   25.00f,  1,  180.0f,  180.0f},
    {  0.0f,  0.0f,   50.00f,   30.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   30.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   20.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   20.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   10.00f, 10,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   10.00f,  1,    0.0f,  360.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f,  0,    0.0f,  180.0f},
    {  0.0f,  0.0f,   50.00f,   50.00f,  0,    0.0f,  180.0f},
    {  0.0f,  0.0f,   10.00f,   10.00f,  0,  270.0f,  180.0f},
    {  0.0f,  0.0f,   10.00f,   10.00f,  0,  270.0f,  180.0f},
    {  0.0f,  0.0f,   10.00f,   10.00f,  0,   90.0f,  180.0f},
    {  0.0f,  0.0f,   10.00f,   10.00f,  0,   90.0f,  180.0f}

    };

/*  symbol text structures  */

static const SYmText                SymbolText[] = {

    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "GI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "GI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "GI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "IW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "IW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "IW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "MI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "MI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "MI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "SW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "SW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "SW"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "WI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "WI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "WI"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "JA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "JA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "JA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "PA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "PA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "PA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "TA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "TA"},
    { 20.0f, -50.0f,  40.0f,   0.0f,  2,  0, "TA"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "?"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "$"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "@"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "#"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "&"},
    {-50.0f, -50.0f, 100.0f,   0.0f,  1,  0, "%"}

    };

/*  symbol xy coordinates for lines and fills  */

static const CSW_F                  SymbolXY[] = {

     -50.000f,  50.000f,  50.000f,  50.000f,  50.000f, -50.000f, -50.000f, -50.000f,
     -50.000f,  50.000f, -50.000f,  50.000f,  50.000f,  50.000f,  50.000f, -50.000f,
     -50.000f, -50.000f, -50.000f,  50.000f,   0.000f,  50.000f,  50.000f, -50.000f,
     -50.000f, -50.000f,   0.000f,  50.000f,   0.000f,  50.000f,  50.000f, -50.000f,
     -50.000f, -50.000f,   0.000f,  50.000f,   0.000f,  50.000f,   0.000f, -50.000f,
     -50.000f,   0.000f,  50.000f,   0.000f, -50.000f,  50.000f,  50.000f, -50.000f,
      50.000f,  50.000f, -50.000f, -50.000f,   0.000f,  50.000f,  50.000f,   0.000f,
       0.000f, -50.000f, -50.000f,   0.000f,   0.000f,  50.000f,   0.000f,  50.000f,
      50.000f,   0.000f,   0.000f, -50.000f, -50.000f,   0.000f,   0.000f,  50.000f,
       0.000f, -50.000f,   0.000f,  50.000f,   0.000f,  50.000f,  50.000f,   0.000f,
     -50.000f,   0.000f,   0.000f,  50.000f,   0.000f,  50.000f,  50.000f,   0.000f,
     -50.000f,   0.000f,   0.000f,  50.000f,   0.000f,   0.000f,   0.000f, -50.000f,
     -50.000f, -50.000f,   0.000f,   0.000f,  50.000f, -50.000f,   0.000f,   0.000f,
      50.000f,  50.000f, -50.000f,  50.000f,   0.000f,   0.000f,   0.000f,   0.000f,
      50.000f,  50.000f, -50.000f,  50.000f,   0.000f,   0.000f, -50.000f, -50.000f,
       0.000f,   0.000f,  50.000f, -50.000f, -50.000f,  50.000f,  50.000f,  50.000f,
     -50.000f, -50.000f,  50.000f, -50.000f, -50.000f,  50.000f,   0.000f,   0.000f,
      50.000f,  50.000f,   0.000f,   0.000f,   0.000f, -50.000f, -50.000f,  50.000f,
     -25.000f,  25.000f,  50.000f,  50.000f,  25.000f,  25.000f,  50.000f, -50.000f,
      25.000f, -25.000f, -50.000f, -50.000f, -25.000f, -25.000f, -25.000f, -25.000f,
     -25.000f,  25.000f,  25.000f,  25.000f,  25.000f, -25.000f, -25.000f, -25.000f,
     -25.000f,  25.000f,  25.000f,  25.000f,  25.000f, -25.000f, -25.000f, -25.000f,
     -25.000f,  25.000f, -50.000f,  50.000f, -25.000f,  25.000f,  25.000f,  25.000f,
      50.000f,  50.000f,  25.000f, -25.000f,  50.000f, -50.000f, -25.000f, -25.000f,
     -50.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -50.000f, -50.000f,
      50.000f,  50.000f, -50.000f,   0.000f,  50.000f,   0.000f,   0.000f,  50.000f,
       0.000f, -50.000f,   0.000f,   0.000f,  50.000f,  50.000f, -50.000f,  50.000f,
       0.000f,   0.000f,   0.000f,   0.000f,  50.000f, -50.000f, -50.000f, -50.000f,
       0.000f,   0.000f,   0.000f,   0.000f,  50.000f,  50.000f, -50.000f,  50.000f,
       0.000f,   0.000f,   0.000f,   0.000f,  50.000f, -50.000f, -50.000f, -50.000f,
       0.000f,   0.000f,   0.000f,  50.000f,   0.000f, -50.000f, -15.000f,  50.000f,
      15.000f,  50.000f,   0.000f,  50.000f,   0.000f, -50.000f, -15.000f, -50.000f,
      15.000f, -50.000f, -10.000f,  50.000f,  10.000f,  50.000f,  10.000f,  10.000f,
      50.000f,  10.000f,  50.000f, -10.000f,  10.000f, -10.000f,  10.000f, -50.000f,
     -10.000f, -50.000f, -10.000f, -10.000f, -50.000f, -10.000f, -50.000f,  10.000f,
     -10.000f,  10.000f, -10.000f,  50.000f, -10.000f,  50.000f,  10.000f,  50.000f,
      10.000f,  10.000f,  50.000f,  10.000f,  50.000f, -10.000f,  10.000f, -10.000f,
      10.000f, -50.000f, -10.000f, -50.000f, -10.000f, -10.000f, -50.000f, -10.000f,
     -50.000f,  10.000f, -10.000f,  10.000f, -10.000f,  50.000f,   0.000f,  50.000f,
       0.000f, -50.000f,  50.000f,   0.000f, -50.000f,   0.000f, -35.354f,  35.354f,
      35.354f, -35.354f, -35.354f, -35.354f,  35.354f,  35.354f,   0.000f,  50.000f,
       0.000f, -50.000f,  50.000f,   0.000f, -50.000f,   0.000f, -35.354f,  35.354f,
      35.354f, -35.354f, -35.354f, -35.354f,  35.354f,  35.354f, -50.000f, -50.000f,
      50.000f,  50.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -50.000f,
      50.000f,  50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -50.000f,  50.000f,
      50.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f, -50.000f,
      50.000f,  50.000f, -50.000f,   0.000f, -25.000f,   0.000f,  25.000f,   0.000f,
      50.000f,   0.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f, -25.000f,
       0.000f, -50.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f, -50.000f,
      50.000f,  50.000f, -50.000f,   0.000f, -25.000f,   0.000f,  25.000f,   0.000f,
      50.000f,   0.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f, -25.000f,
       0.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,  50.000f,
      50.000f, -50.000f, -50.000f,   0.000f, -25.000f,   0.000f,  25.000f,   0.000f,
      50.000f,   0.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f, -25.000f,
       0.000f, -50.000f, -50.000f,  50.000f,  50.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -35.354f, -35.354f,
     -17.677f, -17.677f,  17.677f,  17.677f,  35.354f,  35.354f, -35.354f,  35.354f,
     -17.677f,  17.677f,  17.677f, -17.677f,  35.354f, -35.354f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -50.000f,   0.000f,
     -25.000f,   0.000f,  25.000f,   0.000f,  50.000f,   0.000f,   0.000f,  25.000f,
       0.000f,  50.000f,   0.000f, -25.000f,   0.000f, -50.000f, -40.000f,  10.000f,
     -50.000f,   0.000f, -40.000f, -10.000f, -50.000f,   0.000f,  50.000f,   0.000f,
      40.000f,  10.000f,  50.000f,   0.000f,  40.000f, -10.000f, -50.000f,   0.000f,
      50.000f,   0.000f,  40.000f,  10.000f,  50.000f,   0.000f,  40.000f, -10.000f,
     -50.000f,   0.000f,  50.000f,   0.000f,   0.000f,  10.000f,   0.000f, -10.000f,
     -50.000f,   0.000f, -25.000f,  43.301f,  25.000f,  43.301f,  50.000f,   0.000f,
      25.000f, -43.301f, -25.000f, -43.301f, -50.000f,   0.000f, -50.000f,   0.000f,
     -25.000f,  43.301f,  25.000f,  43.301f,  50.000f,   0.000f,  25.000f, -43.301f,
     -25.000f, -43.301f, -50.000f,   0.000f, -50.000f,   0.000f, -10.000f,   0.000f,
       0.000f,  10.000f,   0.000f,  20.000f,  10.000f,   0.000f,  50.000f,   0.000f,
       0.000f, -10.000f,   0.000f, -20.000f, -10.000f,   0.000f,   0.000f,  10.000f,
      10.000f,   0.000f,   0.000f, -10.000f, -10.000f,   0.000f, -50.000f,   0.000f,
     -10.000f,   0.000f,   0.000f,  10.000f,   0.000f,  20.000f,  10.000f,   0.000f,
      50.000f,   0.000f,   0.000f, -10.000f,   0.000f, -20.000f, -10.000f,   0.000f,
       0.000f,  10.000f,  10.000f,   0.000f,   0.000f, -10.000f, -10.000f,   0.000f,
     -50.000f,   0.000f, -10.000f,   0.000f,  10.000f,   0.000f,  50.000f,   0.000f,
     -10.000f,   0.000f,   0.000f,  10.000f,  10.000f,   0.000f,   0.000f, -10.000f,
     -10.000f,   0.000f, -50.000f,   0.000f, -10.000f,   0.000f,  10.000f,   0.000f,
      50.000f,   0.000f, -10.000f,   0.000f,   0.000f,  10.000f,  10.000f,   0.000f,
       0.000f, -10.000f, -10.000f,   0.000f, -50.000f,   0.000f, -10.000f,   0.000f,
      10.000f,   0.000f,  50.000f,   0.000f,   0.000f,   7.500f,   0.000f,  20.000f,
       0.000f,  -7.500f,   0.000f, -20.000f, -10.000f,  -7.500f, -10.000f,   7.500f,
      10.000f,   7.500f,  10.000f,  -7.500f, -10.000f,  -7.500f, -50.000f,   0.000f,
     -10.000f,   0.000f,  10.000f,   0.000f,  50.000f,   0.000f,   0.000f,   7.500f,
       0.000f,  20.000f,   0.000f,  -7.500f,   0.000f, -20.000f, -10.000f,  -7.500f,
     -10.000f,   7.500f,  10.000f,   7.500f,  10.000f,  -7.500f, -10.000f,  -7.500f,
     -50.000f,   0.000f, -10.000f,   0.000f,  10.000f,   0.000f,  50.000f,   0.000f,
     -10.000f,  -7.500f, -10.000f,   7.500f,  10.000f,   7.500f,  10.000f,  -7.500f,
     -10.000f,  -7.500f, -50.000f,   0.000f, -10.000f,   0.000f,  10.000f,   0.000f,
      50.000f,   0.000f, -10.000f,  -7.500f, -10.000f,   7.500f,  10.000f,   7.500f,
      10.000f,  -7.500f, -10.000f,  -7.500f, -10.000f,  50.000f, -10.000f, -50.000f,
      10.000f,  50.000f,  10.000f, -50.000f, -60.000f, -10.000f, -50.000f, -20.000f,
     -40.000f, -10.000f, -50.000f, -20.000f, -50.000f,   0.000f,  40.000f, -10.000f,
      50.000f, -20.000f,  60.000f, -10.000f,  50.000f, -20.000f,  50.000f,   0.000f,
     -60.000f, -10.000f, -50.000f,   0.000f, -40.000f, -10.000f, -50.000f, -20.000f,
     -50.000f,   0.000f,  40.000f, -10.000f,  50.000f,   0.000f,  60.000f, -10.000f,
      50.000f, -20.000f,  50.000f,   0.000f, -50.000f,   0.000f,  40.000f,   0.000f,
      40.000f,   5.000f,  50.000f,   0.000f,  40.000f,  -5.000f,  40.000f,   5.000f,
     -50.000f,   0.000f,  40.000f,   0.000f,  40.000f,   5.000f,  50.000f,   0.000f,
      40.000f,  -5.000f,  40.000f,   5.000f, -50.000f,   0.000f,  40.000f,   0.000f,
      40.000f,   5.000f,  50.000f,   0.000f,  40.000f,  -5.000f,  40.000f,   5.000f,
     -50.000f,   0.000f,  40.000f,   0.000f,  40.000f,   5.000f,  50.000f,   0.000f,
      40.000f,  -5.000f,  40.000f,   5.000f, -50.000f,   0.000f,  50.000f,   0.000f,
       0.000f,   0.000f,   0.000f,  15.000f, -50.000f,   0.000f,  50.000f,   0.000f,
      40.000f, -10.000f, -50.000f,   0.000f,  50.000f,   0.000f,  40.000f,  10.000f,
     -50.000f,   0.000f,  50.000f,   0.000f, -12.000f,   6.000f,  12.000f,  -6.000f,
     -12.000f,  -6.000f,  12.000f,   6.000f, -50.000f,   0.000f,  50.000f,   0.000f,
     -20.000f,   0.000f,   0.000f,  34.642f,  20.000f,   0.000f, -20.000f,   0.000f,
     -50.000f,   0.000f,  50.000f,   0.000f, -20.000f,   0.000f,   0.000f,  34.642f,
      20.000f,   0.000f, -20.000f,   0.000f, -50.000f,   0.000f,  50.000f,   0.000f,
     -40.000f,   0.000f, -30.000f,  17.321f, -20.000f,   0.000f, -40.000f,   0.000f,
     -10.000f,   0.000f,   0.000f,  17.321f,  10.000f,   0.000f, -10.000f,   0.000f,
      20.000f,   0.000f,  30.000f,  17.321f,  40.000f,   0.000f,  20.000f,   0.000f,
     -50.000f,   0.000f,  50.000f,   0.000f, -40.000f,   0.000f, -30.000f,  17.321f,
     -20.000f,   0.000f, -40.000f,   0.000f, -10.000f,   0.000f,   0.000f,  17.321f,
      10.000f,   0.000f, -10.000f,   0.000f,  20.000f,   0.000f,  30.000f,  17.321f,
      40.000f,   0.000f,  20.000f,   0.000f, -50.000f,   0.000f,  50.000f,   0.000f,
     -45.000f,   0.000f, -40.000f,   8.660f, -35.000f,   0.000f, -45.000f,   0.000f,
     -25.000f,   0.000f, -20.000f,   8.660f, -15.000f,   0.000f, -25.000f,   0.000f,
      -5.000f,   0.000f,   0.000f,   8.660f,   5.000f,   0.000f,  -5.000f,   0.000f,
      15.000f,   0.000f,  20.000f,   8.660f,  25.000f,   0.000f,  15.000f,   0.000f,
      35.000f,   0.000f,  40.000f,   8.660f,  45.000f,   0.000f,  35.000f,   0.000f,
     -50.000f,   0.000f,  50.000f,   0.000f, -45.000f,   0.000f, -40.000f,   8.660f,
     -35.000f,   0.000f, -45.000f,   0.000f, -25.000f,   0.000f, -20.000f,   8.660f,
     -15.000f,   0.000f, -25.000f,   0.000f,  -5.000f,   0.000f,   0.000f,   8.660f,
       5.000f,   0.000f,  -5.000f,   0.000f,  15.000f,   0.000f,  20.000f,   8.660f,
      25.000f,   0.000f,  15.000f,   0.000f,  35.000f,   0.000f,  40.000f,   8.660f,
      45.000f,   0.000f,  35.000f,   0.000f, -50.000f,  30.000f,  50.000f,  30.000f,
      50.000f, -30.000f, -50.000f, -30.000f, -50.000f,  30.000f, -50.000f,  30.000f,
      50.000f,  30.000f,  50.000f, -30.000f, -50.000f, -30.000f, -50.000f,  30.000f,
     -50.000f,  20.000f,  50.000f,  20.000f,  50.000f, -20.000f, -50.000f, -20.000f,
     -50.000f,  20.000f, -50.000f,  20.000f,  50.000f,  20.000f,  50.000f, -20.000f,
     -50.000f, -20.000f, -50.000f,  20.000f, -50.000f,  10.000f,  50.000f,  10.000f,
      50.000f, -10.000f, -50.000f, -10.000f, -50.000f,  10.000f, -50.000f,  10.000f,
      50.000f,  10.000f,  50.000f, -10.000f, -50.000f, -10.000f, -50.000f,  10.000f,
     -50.000f,  11.200f, -11.807f,  11.200f,   0.000f,  47.500f,  11.807f,  11.200f,
      50.000f,  11.200f,  20.430f, -15.297f,  30.900f, -47.500f,   0.000f, -28.130f,
     -30.900f, -47.500f, -20.430f, -15.297f, -50.000f,  11.200f, -50.000f,  11.200f,
     -11.807f,  11.200f,   0.000f,  47.500f,  11.807f,  11.200f,  50.000f,  11.200f,
      20.430f, -15.297f,  30.900f, -47.500f,   0.000f, -28.130f, -30.900f, -47.500f,
     -20.430f, -15.297f, -50.000f,  11.200f, -10.000f,  50.000f,  10.000f,  50.000f,
      10.000f,  40.000f, -10.000f,  40.000f, -10.000f,  50.000f, -20.000f, -50.000f,
     -10.000f,  40.000f,  13.333f,  10.000f, -16.667f, -20.000f,  20.000f, -50.000f,
      10.000f,  40.000f, -13.333f,  10.000f,  16.667f, -20.000f, -20.000f, -50.000f,
     -10.000f,  50.000f,  10.000f,  50.000f,  10.000f,  40.000f, -10.000f,  40.000f,
     -10.000f,  50.000f, -20.000f, -50.000f, -10.000f,  40.000f,  13.333f,  10.000f,
     -16.667f, -20.000f,  20.000f, -50.000f,  10.000f,  40.000f, -13.333f,  10.000f,
      16.667f, -20.000f, -20.000f, -50.000f, -50.000f, -50.000f,  30.000f,  30.000f,
      50.000f, -50.000f, -40.000f,  40.000f, -50.000f,  15.000f, -50.000f,  20.000f,
     -47.500f,  30.000f, -40.000f,  40.000f, -30.000f,  47.500f, -20.000f,  50.000f,
      20.000f,  40.000f,  25.000f,  45.000f,  35.000f,  47.500f,  45.000f,  49.000f,
      50.000f,  50.000f,  49.000f,  45.000f,  47.500f,  35.000f,  45.000f,  25.000f,
      40.000f,  20.000f,  20.000f,  40.000f, -50.000f, -50.000f,  30.000f,  30.000f,
      50.000f, -50.000f, -40.000f,  40.000f, -50.000f,  15.000f, -50.000f,  20.000f,
     -47.500f,  30.000f, -40.000f,  40.000f, -30.000f,  47.500f, -20.000f,  50.000f,
      20.000f,  40.000f,  25.000f,  45.000f,  35.000f,  47.500f,  45.000f,  49.000f,
      50.000f,  50.000f,  49.000f,  45.000f,  47.500f,  35.000f,  45.000f,  25.000f,
      40.000f,  20.000f,  20.000f,  40.000f
    };




/*
******************************************************************

                  g p f _ g e t s y m b o l c i r c l e

******************************************************************

  function name:    gpf_getsymbolcircle      (int)

  call sequence:    gpf_getsymbolcircle (nsym, circlelist, ncircle)

  purpose:          Retrieve a list of circle definition structures to be
                    used for plotting circles in a symbol.

  return value:     status code

                    0 = symbol number is not defined 
                    1 = normal successful completion

  calling parameters:

    nsym           r    int            symbol number 
    circlelist     w    SYmCircle**    Array of symbol circle structure pointers 
    ncircle        w    int*           Number of circle structures returned
                                       (if the symbol is undefined, 
                                        this is returned as zero)

*/

int GPFSymbol::gpf_getsymbolcircle (int nsym, const SYmCircle **circlelist, int *ncircle)
{
    long int       i, first, n;

    if (nsym < 0  ||  nsym > TotalNumSymbols) {
        *ncircle = 0;
        return 0;
    }

    n = SymbolList[nsym].ncircle;
    first = SymbolList[nsym].firstcircle;
    if (n < 1  ||  first < 0) {
        *ncircle = 0;
        return 1;
    }

    if (n > MAXSYMITEM) {
        n = MAXSYMITEM;
    }

    for (i=0; i<n; i++) {
        circlelist[i] = SymbolCircles + first + i;
    }

    *ncircle = n;
    return 1;

}  /*  end of function gpf_getsymbolcircle  */





/*
******************************************************************

                 g p f _ g e t s y m b o l t e x t

******************************************************************

  function name:    gpf_getsymboltext      (int)

  call sequence:    gpf_getsymboltext (nsym, textlist, ntext)

  purpose:          Retrieve symbol text structures for plotting.

  return value:     status code

                    0 = symbol number out of range
                    1 = normal successful completion

  calling parameters:

    nsym      r    int             Symbol number
    textlist  w    SYmText**       Array of pointers to symbol text structures
    ntext     w    int*            number of text items

*/

int GPFSymbol::gpf_getsymboltext (int nsym, const SYmText **textlist, int *ntext)
{
    long int     i, first, n;

    if (nsym < 0  ||  nsym > TotalNumSymbols) {
        *ntext = 0;
        return 0;
    }

    n = SymbolList[nsym].ntext;
    first = SymbolList[nsym].firsttext;

    if (n < 1  ||  first < 0) {
        *ntext = 0;
        return 1;
    }

    if (n > MAXSYMITEM) {
        n = MAXSYMITEM;
    }

    for (i=0; i<n; i++) {
        textlist[i] = SymbolText + first + i;
    }

    *ntext = n;
    return 1;

}  /*  end of function gpf_getsymboltext  */






/*
******************************************************************

               g p f _ g e t s y m b o l v e c

******************************************************************

  function name:    gpf_getsymbolvec     (int)

  call sequence:    gpf_getsymbolvec (nsym, veclist, nvec)

  purpose:          Return a list of vector structures used to plot a symbol

  return value:     status code

                    0 = invalid symbol number
                    1 = normal successful completion

  calling parameters:

    nsym     r    int              symbol number
    veclist  w    SYmVecList**     array of vector pointers returned
    nvec     w    int*             number of vector pointers returned

*/

int GPFSymbol::gpf_getsymbolvec (int nsym, const SYmVecList **veclist, int *nvec)
{
    long int     i, n, first;

    if (nsym < 0  ||  nsym > TotalNumSymbols) {
        *nvec = 0;
        return 0;
    }

    n = SymbolList[nsym].nline;
    first = SymbolList[nsym].firstline;
    if (n < 1  ||  first < 0) {
        *nvec = 0;
        return 1;
    }

    if (n > MAXSYMITEM) {
        n = MAXSYMITEM;
    }

    for (i=0; i<n; i++) {
        veclist[i] = SymbolVectors + first + i;
    }

    *nvec = n;
    return 1;

}  /*  end of function gpf_getsymbolvec  */






/*
******************************************************************

                   g p f _ g e t s y m b o l x y 

******************************************************************

  function name:    gpf_getsymbolxy        (int)

  call sequence:    gpf_getsymbolxy (veclist, xy, npts)

  purpose:          Return arrays of x,y coordinates for a symbol 
                    line or fill area.

  return value:     status code

                    0 = symbol number out of range
                    1 = normal successful completion

  calling parameters:

    veclist  r    SYmVecList*    pointer to vector structure 
    xy       w    CSW_F*         array of x, y coordinates 
    npts     w    int*           number of points returned

                  the x and y coordinates are relative to the
                  symbol center, in percent of symbol size

*/

int GPFSymbol::gpf_getsymbolxy (const SYmVecList *veclist, CSW_F *xy, int *npts)
{
    long int       i, firstvec, nvec;
    const CSW_F    *tmp;

    firstvec = veclist->firstvec;
    nvec = veclist->nvec;

    if (firstvec < 0  ||  nvec < 2) {
        *npts = 0;
        return 0;
    }

    tmp = SymbolXY + firstvec;

    if (nvec > MAXVECTORXY) {
        nvec = MAXVECTORXY;
    }

    for (i=0; i<nvec; i++) {
        xy[i] = *tmp;
        tmp++;
    }

    *npts = nvec;
    return 1;

}  /*  end of function gpf_getsymbolxy  */



/*
******************************************************************

                g p f _ s e t s y m b o l p a r m s

******************************************************************

  function name:    gpf_setsymbolparms     (int)

  call sequence:    gpf_setsymbolparms (snum, x, y, size, angle)

  purpose:          Set the symbol geometry parameters for plotting the symbol.

  return value:     status code
   
                    0 = symbol number not valid
                    1 = normal successful completion

  calling parameters:

    snum        r    int          symbol number
    x           r    CSW_F        x coordinate of symbol center in plotter units
    y           r    CSW_F        y coordinate of symbol center in plotter units
    size        r    CSW_F        symbol size in plotter units
    angle       r    CSW_F        symbol angle in radians

*/

int GPFSymbol::gpf_setsymbolparms (int snum, CSW_F x, CSW_F y, CSW_F size, CSW_F angle)
{
    if (snum < 0  ||  snum > TotalNumSymbols) {
        return 0;
    }

    CurrentSymbol = snum;
    SymXpos = x;
    SymYpos = y;
    SymSize = size;

    Rflag2 = 1;
    SinAng = (CSW_F)sin((double)angle);
    CosAng = (CSW_F)cos((double)angle);

    if (angle > -0.02f  &&  angle < .02f) {
        Rflag2 = 0;
    }

    SymAng = angle;

    return 1;

}  /*  end of function gpf_setsymbolparms  */






/*
******************************************************************

                 g p f _ s y m l i n e t r a n s

******************************************************************

  function name:    gpf_symlinetrans      (int)

  call sequence:    gpf_symlinetrans (xy, npts)

  purpose:          Translate lines and fill boundaries from internal
                    symbol coordinates to plot coordinates depending 
                    on the most recent symbol parameters set via 
                    gpf_setsymbolparms.

  return value:     status code

                    0 = invalid symbol number is currently set
                    1 = normal successful completion

  calling parameters:

    xy       r/w   CSW_F*    array of symbol x coordinates
    npts     r     int       number of points in x and y

*/

int GPFSymbol::gpf_symlinetrans (CSW_F *xy, int npts)
{
    int       i, j, rflag;
    CSW_F     xt, siz100;

    if (CurrentSymbol < 0  ||  CurrentSymbol > TotalNumSymbols) {
        return 0;
    }

    rflag = SymbolList[CurrentSymbol].rflag;

    i = 0;
    siz100 = SymSize / 100.f;
    while (i < npts) {
        j = i+1;
        xy[i] = xy[i] * siz100;
        xy[j] = xy[j] * siz100;
        if (rflag && Rflag2) {
            xt = xy[i]*CosAng - xy[j]*SinAng;
            xy[j] = xy[i]*SinAng + xy[j]*CosAng;
            xy[i] = xt;
        }
        xy[i] += SymXpos;
        xy[j] += SymYpos;

        i += 2;
    }

    return 1;

}  /*  end of function gpf_symlinetrans  */






/*
******************************************************************

               g p f _ s y m c i r c l e t r a n s

******************************************************************

  function name:    gpf_symcircletrans      (int)

  call sequence:    gpf_symcircletrans (x, y, r1, r2, ang1)

  purpose:          Convert internal symbol circle coordinates
                    to plotter coordinates

  return value:     status code

                    0 = invalid current symbol number
                    1 = normal successful completion

  calling parameters:

    x     r/w      CSW_F*   x coordinate of circle center
    y     r/w      CSW_F*   y coordinate of circle center
    r1    r/w      CSW_F*   x radius of circle
    r2    r/w      CSW_F*   y radius of circle
    ang1  r/w      CSW_F*   beginning angle of circular arc in degrees

*/

int GPFSymbol::gpf_symcircletrans (CSW_F *x, CSW_F *y, CSW_F *r1, CSW_F *r2, CSW_F *ang1)
{
    int        rflag;
    CSW_F      xt, angtmp;

    if (CurrentSymbol < 0  ||  CurrentSymbol > TotalNumSymbols) {
        return 0;
    }

    rflag = SymbolList[CurrentSymbol].rflag;

    *x = *x * SymSize / 100.f;
    *y = *y * SymSize / 100.f;
    *r1 = *r1 * SymSize / 100.f;
    *r2 = *r2 * SymSize / 100.f;

    angtmp = *ang1;
    if (rflag && Rflag2) {
        xt = *x * CosAng - *y * SinAng;
        *y = *x * SinAng + *y * CosAng;
        *x = xt;
        angtmp = *ang1 + (SymAng * 180.f / 3.1415926f);
    }

    *x = *x + SymXpos;
    *y = *y + SymYpos;

    if (*r2 < 0.001f * *r1) {
        return 1;
    }

    xt = *r1 / *r2;
    if (xt > 0.99f  &&  xt < 1.01f) {
        *ang1 = angtmp;
    }

    return 1;

}  /*  end of function gpf_symcircletrans  */






/*
******************************************************************

              g p f _ s y m t e x t t r a n s

******************************************************************

  function name:    gpf_symtexttrans    (int)

  call sequence:    gpf_symtexttrans (x, y, size, angle)

  purpose:          convert internal symbol text position to plot coordinates

  return value:     status code

                    0 = invalid current symbol number
                    1 = normal successful completion

  calling parameters:

    x      r/w     CSW_F*   x coordinate of text lower left corner
    y      r/w     CSW_F*   y coordinate of text lower left corner
    size   r/w     CSW_F*   text size
    angle  r/w     CSW_F*   text angle in radians

*/

int GPFSymbol::gpf_symtexttrans (CSW_F *x, CSW_F *y, CSW_F *size, CSW_F *angle)
{
    int          rflag;
    CSW_F        xt;

    if (CurrentSymbol < 0  ||  CurrentSymbol > TotalNumSymbols) {
        return 0;
    }

    rflag = SymbolList[CurrentSymbol].rflag;

    *x = *x * SymSize / 100.f;
    *y = *y * SymSize / 100.f;
    *size = *size * SymSize / 100.f;

    if (rflag && Rflag2) {
        xt = *x * CosAng - *y * SinAng;
        *y = *x * SinAng + *y * CosAng;
        *x = xt;
        *angle = *angle + SymAng;
    }

    *x = *x + SymXpos;
    *y = *y + SymYpos;

    return 1;

}  /*  end of function gpf_symtexttrans  */




/*
 *************************************************************************************

                 g e t _ a r c _ p o i n t s _ d o u b l e

 *************************************************************************************
*/
int GPFSymbol::get_arc_points_double
                          (double r1, double r2, double ang1, double anglen,
                           double *xout, double *yout, int *nout, int maxpts)
{

    CSW_F            *x, *y;
    int              npts, narc, i, istat;

    GPFShape         gpf_shape_obj;

    *nout = 0;

    npts = maxpts - 1;
    if (npts > 40) npts = 40;
    if (npts < 4) {
        return -1;
    }

/*
    allocate work space for the arc points
*/
    x = (CSW_F *)csw_Malloc (npts * 2 * sizeof(CSW_F));
    if (!x) {
        return -1;
    }
    y = x + npts;

/*
    calculate points for an arc centered at 0,0
*/
    istat = gpf_shape_obj.gpf_calcarcpoints2 ((CSW_F)r1, (CSW_F)r2, (CSW_F)ang1, (CSW_F)anglen,
                                npts, 2,
                                x, y, &narc);

    if (istat != 1) {
        csw_Free (x);
        return -1;
    }

    for (i=0; i<narc; i++) {
        xout[i] = (double)x[i];
        yout[i] = (double)y[i];
    }

    *nout = narc;

    csw_Free (x);

    return 1;

}  /*  end of static function get_arc_points_double  */




/*
 *******************************************************************************************

                  g p f _ s y m b o l _ l i n e s _ a n d _ f i l l s

 *******************************************************************************************
*/
int GPFSymbol::gpf_symbol_lines_and_fills (int snumin, double sizein,
                                double *xline, double *yline, int *icline, int *nline,
                                double *xfill, double *yfill, int *icfill, int *nfill,
                                int maxpts, int maxcomp)

{

    static  const    SYmVecList      *veclist[1000];
    static  const    SYmCircle       *circlelist[1000];
    CSW_F            *xy = p_xy;

    int         npline, ncline, npleftline,
                npfill, ncfill, npleftfill;

    int         symb;
    double      size, scale;

    int         istat, ifill, i, j, k, n,
                npts, ncircle, nvec;
    CSW_F       ang1, ang2;
    CSW_F       r1, r2;

    symb = snumin;
    size = sizein;

    *nline = 0;
    *nfill = 0;

    if (size <= 0.0) {
        return -1;
    }

    scale = size / 100.0;

    symb--;

/*
    get the pieces for the symbol
*/
    istat = gpf_getsymbolvec (symb, veclist, &nvec);
    if (!istat) {
        return 0;
    }

    istat = gpf_getsymbolcircle (symb, circlelist, &ncircle);
    if (!istat) {
        return 0;
    }

    npline = 0;
    ncline = 0;
    npleftline = maxpts;
    npfill = 0;
    ncfill = 0;
    npleftfill = maxpts;

/*
    plot unfilled circles
*/
    for (i=0; i<ncircle; i++) {
        ifill = circlelist[i]->ifill;
        if (ifill > 1) ifill -= 10;
        if (ifill == 0) {
            r1 = circlelist[i]->r1;
            r2 = circlelist[i]->r2;
            ang1 = circlelist[i]->ang1;
            ang2 = circlelist[i]->ang2;

            istat = get_arc_points_double (
                      (double)r1, (double)r2, (double)ang1, (double)ang2,
                      xline+npline, yline+npline, icline+ncline, npleftline);
                      
            if (istat == -1) {
                return -1;
            }
            npline += icline[ncline];
            ncline++;
            npleftline = maxpts - npline - 1;
            if (npleftline < 2  ||  ncline >= maxcomp) {
                return -1;
            }
        }
    }

/*
    plot polygonal fill areas
*/
    for (i=0; i<nvec; i++) {
        ifill = veclist[i]->fill;
        if (ifill > 1) ifill -= 10;
        if (ifill) {
            istat = gpf_getsymbolxy (veclist[i], xy, &npts);
            npts /= 2;
            if (!istat  ||  npts < 2) {
                continue;
            }

            j = 0;
            for (k=0; k<npts; k++) {
                xfill[npfill] = (double)(xy[j]);
                j++;
                yfill[npfill] = (double)(xy[j]);
                j++;
                npfill++;
            }
            icfill[ncfill] = npts;
            ncfill++;
            npleftfill = maxpts - npfill - 1;
            if (npleftfill < 4  ||  ncfill >= maxcomp) {
                return -1;
            }
        }
    }

/*
    plot filled circles
*/
    for (i=0; i<ncircle; i++) {
        ifill = circlelist[i]->ifill;
        if (ifill > 1) ifill -= 10;
        if (ifill) {
            r1 = circlelist[i]->r1;
            r2 = circlelist[i]->r2;
            ang1 = circlelist[i]->ang1;
            ang2 = circlelist[i]->ang2;

            istat = get_arc_points_double (
                      (double)r1, (double)r2, (double)ang1, (double)ang2,
                      xfill+npfill, yfill+npfill, icfill+ncfill, npleftfill);
                      
            if (istat == -1) {
                return -1;
            }

            npfill += icfill[ncfill];
            ncfill++;
            npleftfill = maxpts - npfill - 1;
            if (npleftfill < 4  ||  ncfill >= maxcomp) {
                return -1;
            }
        }
    }

/*
    plot lines
*/
    for (i=0; i<nvec; i++) {
        ifill = veclist[i]->fill;
        if (ifill > 1) ifill -= 10;
        if (!ifill) {
            istat = gpf_getsymbolxy (veclist[i], xy, &npts);
            npts /= 2;
            if (!istat || npts<2) {
                continue;
            }

            j = 0;
            for (k=0; k<npts; k++) {
                xline[npline] = (double)(xy[j]);
                j++;
                yline[npline] = (double)(xy[j]);
                j++;
                npline++;
            }
            icline[ncline] = npts;
            ncline++;
            npleftline = maxpts - npline - 1;
            if (npleftline < 2  ||  ncline >= maxcomp) {
                return -1;
            }
        }
    }

/*
 * Scale to size.
 */
    n = 0;
    for (i=0; i<ncfill; i++) {
        npts = icfill[i];
        for (j=0; j<npts; j++) {
            xfill[n] *= scale;
            yfill[n] *= scale;
            n++;
        }
    }

    n = 0;
    for (i=0; i<ncline; i++) {
        npts = icline[i];
        for (j=0; j<npts; j++) {
            xline[n] *= scale;
            yline[n] *= scale;
            n++;
        }
    }


    *nfill = ncfill;
    *nline = ncline;

    return 1;
    
}  /*  end of function gpf_symbol_lines_and_fills */
